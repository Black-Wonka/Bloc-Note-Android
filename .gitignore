public class Note {
  public static final String TABLE_NAME = "notes";
  public static final String COLUMN_ID = "id";
  public static final String COLUMN_TITLE = "title";
  public static final String COLUMN_CONTENT = "content";
  public static final String COLUMN_CREATED_AT = "created_at";
  public static final String COLUMN_UPDATED_AT = "updated_at";

  public static final String CREATE_TABLE =
      "CREATE TABLE " + TABLE_NAME + "("
          + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
          + COLUMN_TITLE + " TEXT,"
          + COLUMN_CONTENT + " TEXT,"
          + COLUMN_CREATED_AT + " INTEGER,"
          + COLUMN_UPDATED_AT + " INTEGER"
          + ")";

  private int id;
  private String title;
  private String content;
  private long createdAt;
  private long updatedAt;

  public Note(int id, String title, String content, long createdAt, long updatedAt) {
    this.id = id;
    this.title = title;
    this.content = content;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public int getId() {
    return id;
  }

  public void setId(int id) {
    this.id = id;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
  }

  public long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
  }
}
public class DatabaseHelper extends SQLiteOpenHelper {
  private static final int DATABASE_VERSION = 1;
  private static final String DATABASE_NAME = "notes_db";

  public DatabaseHelper(Context context) {
    super(context, DATABASE_NAME, null, DATABASE_VERSION);
  }

  @Override
  public void onCreate(SQLiteDatabase db) {
    // Création de la table des notes
    db.execSQL(Note.CREATE_TABLE);
  }

  @Override
  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    // Suppression de la table si elle existe
    db.execSQL("DROP TABLE IF EXISTS " + Note.TABLE_NAME);
// Création de la table à nouveau
onCreate(db);
}

// Méthode pour ajouter une nouvelle note
public long insertNote(String title, String content) {
  // Obtention de la base de données en mode écriture
  SQLiteDatabase db = this.getWritableDatabase();
  ContentValues values = new ContentValues();
  values.put(Note.COLUMN_TITLE, title);
  values.put(Note.COLUMN_CONTENT, content);
  values.put(Note.COLUMN_CREATED_AT, System.currentTimeMillis());
  values.put(Note.COLUMN_UPDATED_AT, System.currentTimeMillis());
  // Insertion de la nouvelle note dans la base de données
  long id = db.insert(Note.TABLE_NAME, null, values);
  // Fermeture de la base de données
  db.close();
  // Retour de l'ID de la nouvelle note
  return id;
}

// Méthode pour obtenir une note à partir de son ID
public Note getNote(long id) {
  // Obtention de la base de données en mode lecture
  SQLiteDatabase db = this.getReadableDatabase();
  Cursor cursor = db.query(Note.TABLE_NAME,
      new String[]{Note.COLUMN_ID, Note.COLUMN_TITLE, Note.COLUMN_CONTENT, Note.COLUMN_CREATED_AT, Note.COLUMN_UPDATED_AT},
      Note.COLUMN_ID + "=?", new String[]{String.valueOf(id)},
      null, null, null, null);
  if (cursor != null) cursor.moveToFirst();
  // Création d'une nouvelle note à partir des données du curseur
  Note note = new Note(
      cursor.getInt(cursor.getColumnIndex(Note.COLUMN_ID)),
      cursor.getString(cursor.getColumnIndex(Note.COLUMN_TITLE)),
      cursor.getString(cursor.getColumnIndex(Note.COLUMN_CONTENT)),
      cursor.getLong(cursor.getColumnIndex(Note.COLUMN_CREATED_AT)),
      cursor.getLong(cursor.getColumnIndex(Note.COLUMN_UPDATED_AT)));
  // Fermeture du curseur et de la base de données
  cursor.close();
  db.close();
  // Retour de la note
  return note;
}

// Méthode pour obtenir toutes les notes
public List<Note> getAllNotes() {
  List<Note> notes = new ArrayList<>();
  // Sélection de toutes les colonnes de toutes les lignes de la table
  String selectQuery = "SELECT * FROM " + Note.TABLE_NAME + " ORDER BY " + Note.COLUMN_UPDATED_AT + " DESC";
   // Obtention de la base de données en mode lecture
  SQLiteDatabase db = this.getReadableDatabase();
  Cursor cursor = db.rawQuery(selectQuery, null);
  // Parcours du curseur pour ajouter chaque note à la liste
  if (cursor.moveToFirst()) {
    do {
      Note note = new Note(
          cursor.getInt(cursor.getColumnIndex(Note.COLUMN_ID)),
          cursor.getString(cursor.getColumnIndex(Note.COLUMN_TITLE)),
          cursor.getString(cursor.getColumnIndex(Note.COLUMN_CONTENT)),
          cursor.getLong(cursor.getColumnIndex(Note.COLUMN_CREATED_AT)),
          cursor.getLong(cursor.getColumnIndex(Note.COLUMN_UPDATED_AT)));
      notes.add(note);
    } while (cursor.moveToNext());
  }
  // Fermeture du curseur et de la base de données
  cursor.close();
  db.close();
  // Retour de la liste des notes
  return notes;
}

// Méthode pour mettre à jour une note
public int updateNote(Note note) {
  // Obtention de la base de données en mode écriture
  SQLiteDatabase db = this.getWritableDatabase();
  ContentValues values = new ContentValues();
  values.put(Note.COLUMN_TITLE, note.getTitle());
  values.put(Note.COLUMN_CONTENT, note.getContent());
  values.put(Note.COLUMN_UPDATED_AT, System.currentTimeMillis());
  // Mise à jour de la note dans la base de données
  return db.update(Note.TABLE_NAME, values, Note.COLUMN_ID + " = ?", new String[]{String.valueOf(note.getId())});
}

// Méthode pour supprimer une note
public void deleteNote(Note note) {
  // Obtention de la base de données en mode écriture
  SQLiteDatabase db = this.getWritableDatabase();
  // Suppression de la note de la base de données
  db.delete(Note.TABLE_NAME, Note.COLUMN_ID + " = ?", new String[]{String.valueOf(note.getId())});
  // Fermeture de la base de données
  db.close();
}

// Méthode pour obtenir le nombre de notes
public int getNotesCount() {
  // Sélection de l'ID de toutes les lignes de la table
  String countQuery = "SELECT * FROM " + Note.TABLE_NAME;
  // Obtention de la base de données en mode lecture
  SQLiteDatabase db = this.getReadableDatabase();
  Cursor cursor = db.rawQuery(countQuery, null);
  int count = cursor.getCount();
  // Fermeture du curseur et de la base de données
  cursor.close();
  db.close();
  // Retour du nombre de notes
  return count;
}
